import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.IntSummaryStatistics;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import com.google.common.io.Files;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {
    public String getGreeting() {
        return "Hello world.";
    }

    public static void main(String[] args) {
        System.out.println(new App().getGreeting());
        
        example1();
        example2();
        example3();
        example4();
        example5();
        example6();
        example7();
        example8();
       example9();
       example10();
       example12();
    }
    
    static void example1() {
    	List<Integer>list1 = new ArrayList<>();
    	list1.add(1);
    	list1.add(5);
    	list1.add(3);
    	
    	// Convert it into a Stream
    	Stream<Integer> newStrem=list1.stream();
    	//System.out.println(" " + list1 );
    	
    	// Print the contents of the stream
    	newStrem.forEach(e -> System.out.println(e));
    }
    
    //creating stream using array
    static void example2() {
    	
    	Integer[] myArray = {1,8,7};
    	
    	// Convert it into a Stream
    	Stream<Integer> myStream = Arrays.stream(myArray);
    	
    	
    	// Print the contents of the stream
	    myStream.forEach(e -> System.out.println(e));
    }
    
    // using map method
    static void example3() {
		String[] myArray = new String[]{"bob", "alice", "paul", "ellie"};
		Stream<String> myStream =  Arrays.stream(myArray);
		
		Stream<String> myNewStream =myStream.map(s -> s.toUpperCase());
		
		String[] myNewArray =
	             myNewStream.toArray(String[]::new);
		
		// Print the contents of the new array		
				for(String s:myNewArray)
					System.out.println(s);
    }
    //using filter method
    static void example4() {
		String[] myArray = new String[]{"bob", "alice", "paul", "ellie"};
		Stream<String> myStream  = Arrays.stream(myArray);
         
		Stream<String> myNewStream = myStream.filter(s -> s.length()>4);
		String[] myNewArray = myNewStream.toArray(String[]::new);
		

		// Print the contents of the new array		
				for(String a:myNewArray)
					System.out.println(a);
    }
    
   // reduction operation
	static void example5() {
		int myArray[] = { 1, 5, 8 };
		int sum = Arrays.stream(myArray).sum();

        	// Print the sum
		System.out.println(sum);
	}
	
	static void example6() {
		String[] myArray = { "this", "is", "a", "sentence" };
		String result = Arrays.stream(myArray).reduce("",(a,b)-> a + b);
		
		System.out.println(result);
	}
	
	//Parallel Array
	static void example7() {
		  // Creating an integer array   
        int[] arr = {5,8,1,0,6,9};  
        // Iterating array elements  
        for (int i : arr) {  
            System.out.print(i+" ");  
        }
        
        System.out.println(" after Parallel sort ");
        Arrays.parallelSort(arr);
        for (int i : arr) {  
            System.out.print(i+" ");  
        }
	} 
	
	//peek method
	  static void example8() {
			
		    System.out.println(" ");
			Stream.of("one", "two", "three", "four")
			  .filter(e -> e.length() > 3)
			  .peek(e -> System.out.println("Filtered value: " + e))
			  .map(String::toUpperCase)
			  .peek(e -> System.out.println("Mapped value: " + e))
			  .collect(Collectors.toList());
		}
	
	  //limit method
	static void example9() {
		
	    System.out.println(" ");
		
		 Stream<Integer> evenNumInfiniteStream = Stream.iterate(0, n -> n + 2);
         
	        List<Integer> newList = evenNumInfiniteStream.limit(10).collect(Collectors.toList());
	                                            
	        System.out.println(newList);
	}
	
	
	static void example10() {
		
		System.out.println(" ");
		  Stream.of("one", "two", "three", "four" , "jerry", "harry" , "five")
		  .filter(e -> e.length() > 3)
		    .peek(e -> System.out.println("Filtered value: " + e))
		     .map(String::toUpperCase)
		     .sorted() // sort them alphabetically
		     .limit(5) // first 5
		     .forEach(System.out::println);
	}
	
	/*static void example11() {
		
		System.out.println(" ");
		IntSummaryStatistics stats = Files.lines(Paths.get("Nio.java"))
				        .map(String::trim)
				        .filter(s -> !s.isEmpty())
				        .collect(summarizingInt);
			 
			 System.out.println(stats.getAverage());
			 System.out.println("count=" + stats.getCount());
			 System.out.println("max=" + stats.getMax());
			 System.out.println("min=" + stats.getMin());
	}*/
	
	//optional example
	static void example12() {
		
		   String[] words = new String[10];  
		   Optional<String> checkNull = 
                   Optional.ofNullable(words[5]);  
      if (checkNull.isPresent()) {  
         String word = words[5].toLowerCase();  
         System.out.print(word);  
     } else  
         System.out.println("word is null");  
	}
	
}
